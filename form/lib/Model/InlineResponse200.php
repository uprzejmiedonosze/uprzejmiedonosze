<?php
/**
 * InlineResponse200
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenALPR Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InlineResponse200 Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200 implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'processing_time' => '\Swagger\Client\Model\InlineResponse200ProcessingTime',
        'img_width' => 'int',
        'img_height' => 'int',
        'credit_cost' => 'int',
        'credits_monthly_used' => 'int',
        'credits_monthly_total' => 'int',
        'results' => '\Swagger\Client\Model\PlateDetails[]',
        'regions_of_interest' => '\Swagger\Client\Model\RegionOfInterest[]',
        'epoch_time' => 'float',
        'version' => 'int',
        'data_type' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'processing_time' => 'processing_time',
        'img_width' => 'img_width',
        'img_height' => 'img_height',
        'credit_cost' => 'credit_cost',
        'credits_monthly_used' => 'credits_monthly_used',
        'credits_monthly_total' => 'credits_monthly_total',
        'results' => 'results',
        'regions_of_interest' => 'regions_of_interest',
        'epoch_time' => 'epoch_time',
        'version' => 'version',
        'data_type' => 'data_type'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'processing_time' => 'setProcessingTime',
        'img_width' => 'setImgWidth',
        'img_height' => 'setImgHeight',
        'credit_cost' => 'setCreditCost',
        'credits_monthly_used' => 'setCreditsMonthlyUsed',
        'credits_monthly_total' => 'setCreditsMonthlyTotal',
        'results' => 'setResults',
        'regions_of_interest' => 'setRegionsOfInterest',
        'epoch_time' => 'setEpochTime',
        'version' => 'setVersion',
        'data_type' => 'setDataType'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'processing_time' => 'getProcessingTime',
        'img_width' => 'getImgWidth',
        'img_height' => 'getImgHeight',
        'credit_cost' => 'getCreditCost',
        'credits_monthly_used' => 'getCreditsMonthlyUsed',
        'credits_monthly_total' => 'getCreditsMonthlyTotal',
        'results' => 'getResults',
        'regions_of_interest' => 'getRegionsOfInterest',
        'epoch_time' => 'getEpochTime',
        'version' => 'getVersion',
        'data_type' => 'getDataType'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const DATA_TYPE_ALPR_RESULTS = 'alpr_results';
    const DATA_TYPE_ALPR_GROUP = 'alpr_group';
    const DATA_TYPE_HEARTBEAT = 'heartbeat';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDataTypeAllowableValues()
    {
        return [
            self::DATA_TYPE_ALPR_RESULTS,
            self::DATA_TYPE_ALPR_GROUP,
            self::DATA_TYPE_HEARTBEAT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['processing_time'] = isset($data['processing_time']) ? $data['processing_time'] : null;
        $this->container['img_width'] = isset($data['img_width']) ? $data['img_width'] : null;
        $this->container['img_height'] = isset($data['img_height']) ? $data['img_height'] : null;
        $this->container['credit_cost'] = isset($data['credit_cost']) ? $data['credit_cost'] : null;
        $this->container['credits_monthly_used'] = isset($data['credits_monthly_used']) ? $data['credits_monthly_used'] : null;
        $this->container['credits_monthly_total'] = isset($data['credits_monthly_total']) ? $data['credits_monthly_total'] : null;
        $this->container['results'] = isset($data['results']) ? $data['results'] : null;
        $this->container['regions_of_interest'] = isset($data['regions_of_interest']) ? $data['regions_of_interest'] : null;
        $this->container['epoch_time'] = isset($data['epoch_time']) ? $data['epoch_time'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("alpr_results", "alpr_group", "heartbeat");
        if (!in_array($this->container['data_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'data_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("alpr_results", "alpr_group", "heartbeat");
        if (!in_array($this->container['data_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets processing_time
     * @return \Swagger\Client\Model\InlineResponse200ProcessingTime
     */
    public function getProcessingTime()
    {
        return $this->container['processing_time'];
    }

    /**
     * Sets processing_time
     * @param \Swagger\Client\Model\InlineResponse200ProcessingTime $processing_time
     * @return $this
     */
    public function setProcessingTime($processing_time)
    {
        $this->container['processing_time'] = $processing_time;

        return $this;
    }

    /**
     * Gets img_width
     * @return int
     */
    public function getImgWidth()
    {
        return $this->container['img_width'];
    }

    /**
     * Sets img_width
     * @param int $img_width Width of the uploaded image in pixels
     * @return $this
     */
    public function setImgWidth($img_width)
    {
        $this->container['img_width'] = $img_width;

        return $this;
    }

    /**
     * Gets img_height
     * @return int
     */
    public function getImgHeight()
    {
        return $this->container['img_height'];
    }

    /**
     * Sets img_height
     * @param int $img_height Height of the input image in pixels
     * @return $this
     */
    public function setImgHeight($img_height)
    {
        $this->container['img_height'] = $img_height;

        return $this;
    }

    /**
     * Gets credit_cost
     * @return int
     */
    public function getCreditCost()
    {
        return $this->container['credit_cost'];
    }

    /**
     * Sets credit_cost
     * @param int $credit_cost The number of API credits that were used to process this image
     * @return $this
     */
    public function setCreditCost($credit_cost)
    {
        $this->container['credit_cost'] = $credit_cost;

        return $this;
    }

    /**
     * Gets credits_monthly_used
     * @return int
     */
    public function getCreditsMonthlyUsed()
    {
        return $this->container['credits_monthly_used'];
    }

    /**
     * Sets credits_monthly_used
     * @param int $credits_monthly_used The number of API credits used this month
     * @return $this
     */
    public function setCreditsMonthlyUsed($credits_monthly_used)
    {
        $this->container['credits_monthly_used'] = $credits_monthly_used;

        return $this;
    }

    /**
     * Gets credits_monthly_total
     * @return int
     */
    public function getCreditsMonthlyTotal()
    {
        return $this->container['credits_monthly_total'];
    }

    /**
     * Sets credits_monthly_total
     * @param int $credits_monthly_total The maximum number of API credits available this month according to your plan
     * @return $this
     */
    public function setCreditsMonthlyTotal($credits_monthly_total)
    {
        $this->container['credits_monthly_total'] = $credits_monthly_total;

        return $this;
    }

    /**
     * Gets results
     * @return \Swagger\Client\Model\PlateDetails[]
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     * @param \Swagger\Client\Model\PlateDetails[] $results
     * @return $this
     */
    public function setResults($results)
    {
        $this->container['results'] = $results;

        return $this;
    }

    /**
     * Gets regions_of_interest
     * @return \Swagger\Client\Model\RegionOfInterest[]
     */
    public function getRegionsOfInterest()
    {
        return $this->container['regions_of_interest'];
    }

    /**
     * Sets regions_of_interest
     * @param \Swagger\Client\Model\RegionOfInterest[] $regions_of_interest Describes the areas analyzed in the input image
     * @return $this
     */
    public function setRegionsOfInterest($regions_of_interest)
    {
        $this->container['regions_of_interest'] = $regions_of_interest;

        return $this;
    }

    /**
     * Gets epoch_time
     * @return float
     */
    public function getEpochTime()
    {
        return $this->container['epoch_time'];
    }

    /**
     * Sets epoch_time
     * @param float $epoch_time Epoch time that the image was processed in milliseconds
     * @return $this
     */
    public function setEpochTime($epoch_time)
    {
        $this->container['epoch_time'] = $epoch_time;

        return $this;
    }

    /**
     * Gets version
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param int $version API format version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets data_type
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     * @param string $data_type Specifies the type of data in this response
     * @return $this
     */
    public function setDataType($data_type)
    {
        $allowed_values = array('alpr_results', 'alpr_group', 'heartbeat');
        if (!in_array($data_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'data_type', must be one of 'alpr_results', 'alpr_group', 'heartbeat'");
        }
        $this->container['data_type'] = $data_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


