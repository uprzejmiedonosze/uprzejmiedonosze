<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenALPR Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.openalpr.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation recognizeBytes
     *
     * 
     *
     * @param string $image_bytes The image file that you wish to analyze encoded in base64 (required)
     * @param string $secret_key The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ (required)
     * @param string $country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config (required)
     * @param int $recognize_vehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request (optional, default to 0)
     * @param string $state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns. (optional, default to )
     * @param int $return_image If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response (optional, default to 0)
     * @param int $topn The number of results you would like to be returned for plate  candidates and vehicle classifications (optional, default to 10)
     * @param string $prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration (optional, default to )
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recognizeBytes($image_bytes, $secret_key, $country, $recognize_vehicle = null, $state = null, $return_image = null, $topn = null, $prewarp = null)
    {
        list($response) = $this->recognizeBytesWithHttpInfo($image_bytes, $secret_key, $country, $recognize_vehicle, $state, $return_image, $topn, $prewarp);
        return $response;
    }

    /**
     * Operation recognizeBytesWithHttpInfo
     *
     * 
     *
     * @param string $image_bytes The image file that you wish to analyze encoded in base64 (required)
     * @param string $secret_key The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ (required)
     * @param string $country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config (required)
     * @param int $recognize_vehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request (optional, default to 0)
     * @param string $state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns. (optional, default to )
     * @param int $return_image If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response (optional, default to 0)
     * @param int $topn The number of results you would like to be returned for plate  candidates and vehicle classifications (optional, default to 10)
     * @param string $prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration (optional, default to )
     * @return Array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recognizeBytesWithHttpInfo($image_bytes, $secret_key, $country, $recognize_vehicle = null, $state = null, $return_image = null, $topn = null, $prewarp = null)
    {
        // verify the required parameter 'image_bytes' is set
        if ($image_bytes === null) {
            throw new \InvalidArgumentException('Missing the required parameter $image_bytes when calling recognizeBytes');
        }
        // verify the required parameter 'secret_key' is set
        if ($secret_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $secret_key when calling recognizeBytes');
        }
        // verify the required parameter 'country' is set
        if ($country === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country when calling recognizeBytes');
        }
        if (!is_null($topn) && ($topn > 1000.0)) {
            throw new \InvalidArgumentException('invalid value for "$topn" when calling DefaultApi.recognizeBytes, must be smaller than or equal to 1000.0.');
        }
        if (!is_null($topn) && ($topn < 1.0)) {
            throw new \InvalidArgumentException('invalid value for "$topn" when calling DefaultApi.recognizeBytes, must be bigger than or equal to 1.0.');
        }

        // parse inputs
        $resourcePath = "/recognize_bytes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($secret_key !== null) {
            $queryParams['secret_key'] = $this->apiClient->getSerializer()->toQueryValue($secret_key);
        }
        // query params
        if ($recognize_vehicle !== null) {
            $queryParams['recognize_vehicle'] = $this->apiClient->getSerializer()->toQueryValue($recognize_vehicle);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if ($return_image !== null) {
            $queryParams['return_image'] = $this->apiClient->getSerializer()->toQueryValue($return_image);
        }
        // query params
        if ($topn !== null) {
            $queryParams['topn'] = $this->apiClient->getSerializer()->toQueryValue($topn);
        }
        // query params
        if ($prewarp !== null) {
            $queryParams['prewarp'] = $this->apiClient->getSerializer()->toQueryValue($prewarp);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($image_bytes)) {
            $_tempBody = $image_bytes;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/recognize_bytes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recognizeFile
     *
     * 
     *
     * @param \SplFileObject $image The image file that you wish to analyze (required)
     * @param string $secret_key The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ (required)
     * @param string $country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config (required)
     * @param int $recognize_vehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request (optional, default to 0)
     * @param string $state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns. (optional, default to )
     * @param int $return_image If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response (optional, default to 0)
     * @param int $topn The number of results you would like to be returned for plate  candidates and vehicle classifications (optional, default to 10)
     * @param string $prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration (optional, default to )
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recognizeFile($image, $secret_key, $country, $recognize_vehicle = null, $state = null, $return_image = null, $topn = null, $prewarp = null)
    {
        list($response) = $this->recognizeFileWithHttpInfo($image, $secret_key, $country, $recognize_vehicle, $state, $return_image, $topn, $prewarp);
        return $response;
    }

    /**
     * Operation recognizeFileWithHttpInfo
     *
     * 
     *
     * @param \SplFileObject $image The image file that you wish to analyze (required)
     * @param string $secret_key The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ (required)
     * @param string $country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config (required)
     * @param int $recognize_vehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request (optional, default to 0)
     * @param string $state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns. (optional, default to )
     * @param int $return_image If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response (optional, default to 0)
     * @param int $topn The number of results you would like to be returned for plate  candidates and vehicle classifications (optional, default to 10)
     * @param string $prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration (optional, default to )
     * @return Array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recognizeFileWithHttpInfo($image, $secret_key, $country, $recognize_vehicle = null, $state = null, $return_image = null, $topn = null, $prewarp = null)
    {
        // verify the required parameter 'image' is set
        if ($image === null) {
            throw new \InvalidArgumentException('Missing the required parameter $image when calling recognizeFile');
        }
        // verify the required parameter 'secret_key' is set
        if ($secret_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $secret_key when calling recognizeFile');
        }
        // verify the required parameter 'country' is set
        if ($country === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country when calling recognizeFile');
        }
        if (!is_null($topn) && ($topn > 1000.0)) {
            throw new \InvalidArgumentException('invalid value for "$topn" when calling DefaultApi.recognizeFile, must be smaller than or equal to 1000.0.');
        }
        if (!is_null($topn) && ($topn < 1.0)) {
            throw new \InvalidArgumentException('invalid value for "$topn" when calling DefaultApi.recognizeFile, must be bigger than or equal to 1.0.');
        }

        // parse inputs
        $resourcePath = "/recognize";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('multipart/form-data'));

        // query params
        if ($secret_key !== null) {
            $queryParams['secret_key'] = $this->apiClient->getSerializer()->toQueryValue($secret_key);
        }
        // query params
        if ($recognize_vehicle !== null) {
            $queryParams['recognize_vehicle'] = $this->apiClient->getSerializer()->toQueryValue($recognize_vehicle);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if ($return_image !== null) {
            $queryParams['return_image'] = $this->apiClient->getSerializer()->toQueryValue($return_image);
        }
        // query params
        if ($topn !== null) {
            $queryParams['topn'] = $this->apiClient->getSerializer()->toQueryValue($topn);
        }
        // query params
        if ($prewarp !== null) {
            $queryParams['prewarp'] = $this->apiClient->getSerializer()->toQueryValue($prewarp);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($image !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['image'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($image));
            } else {
                $formParams['image'] = '@' . $this->apiClient->getSerializer()->toFormValue($image);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/recognize'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recognizeUrl
     *
     * 
     *
     * @param string $image_url A URL to an image that you wish to analyze (required)
     * @param string $secret_key The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ (required)
     * @param string $country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config (required)
     * @param int $recognize_vehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request (optional, default to 0)
     * @param string $state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns. (optional, default to )
     * @param int $return_image If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response (optional, default to 0)
     * @param int $topn The number of results you would like to be returned for plate  candidates and vehicle classifications (optional, default to 10)
     * @param string $prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration (optional, default to )
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recognizeUrl($image_url, $secret_key, $country, $recognize_vehicle = null, $state = null, $return_image = null, $topn = null, $prewarp = null)
    {
        list($response) = $this->recognizeUrlWithHttpInfo($image_url, $secret_key, $country, $recognize_vehicle, $state, $return_image, $topn, $prewarp);
        return $response;
    }

    /**
     * Operation recognizeUrlWithHttpInfo
     *
     * 
     *
     * @param string $image_url A URL to an image that you wish to analyze (required)
     * @param string $secret_key The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ (required)
     * @param string $country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config (required)
     * @param int $recognize_vehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request (optional, default to 0)
     * @param string $state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns. (optional, default to )
     * @param int $return_image If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response (optional, default to 0)
     * @param int $topn The number of results you would like to be returned for plate  candidates and vehicle classifications (optional, default to 10)
     * @param string $prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration (optional, default to )
     * @return Array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recognizeUrlWithHttpInfo($image_url, $secret_key, $country, $recognize_vehicle = null, $state = null, $return_image = null, $topn = null, $prewarp = null)
    {
        // verify the required parameter 'image_url' is set
        if ($image_url === null) {
            throw new \InvalidArgumentException('Missing the required parameter $image_url when calling recognizeUrl');
        }
        // verify the required parameter 'secret_key' is set
        if ($secret_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $secret_key when calling recognizeUrl');
        }
        // verify the required parameter 'country' is set
        if ($country === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country when calling recognizeUrl');
        }
        if (!is_null($topn) && ($topn > 1000.0)) {
            throw new \InvalidArgumentException('invalid value for "$topn" when calling DefaultApi.recognizeUrl, must be smaller than or equal to 1000.0.');
        }
        if (!is_null($topn) && ($topn < 1.0)) {
            throw new \InvalidArgumentException('invalid value for "$topn" when calling DefaultApi.recognizeUrl, must be bigger than or equal to 1.0.');
        }

        // parse inputs
        $resourcePath = "/recognize_url";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($image_url !== null) {
            $queryParams['image_url'] = $this->apiClient->getSerializer()->toQueryValue($image_url);
        }
        // query params
        if ($secret_key !== null) {
            $queryParams['secret_key'] = $this->apiClient->getSerializer()->toQueryValue($secret_key);
        }
        // query params
        if ($recognize_vehicle !== null) {
            $queryParams['recognize_vehicle'] = $this->apiClient->getSerializer()->toQueryValue($recognize_vehicle);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if ($return_image !== null) {
            $queryParams['return_image'] = $this->apiClient->getSerializer()->toQueryValue($return_image);
        }
        // query params
        if ($topn !== null) {
            $queryParams['topn'] = $this->apiClient->getSerializer()->toQueryValue($topn);
        }
        // query params
        if ($prewarp !== null) {
            $queryParams['prewarp'] = $this->apiClient->getSerializer()->toQueryValue($prewarp);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/recognize_url'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
